{"version":3,"sources":["../../src/pages/WellnessTracker/DailyEntry/dailyEntry.ts","../../node_modules/@angular/core/esm5 lazy","../../src lazy","../../src/pages/Dashboard/analyticDashboard.ts","../../src/pages/WellnessTracker/CheckinLog/checkinLog.ts","../../src/pages/WellnessTracker/CheckinLogInfo/checkinLogInfo.ts","../../src/pages/Resources/resources.ts","../../src/pages/Resources/CscContacts/cscContacts.ts","../../src/pages/Resources/Employee/employee.ts","../../src/pages/Resources/EmployeeFamily/employeeFamily.ts","../../src/pages/Resources/Public/public.ts","../../src/pages/Tools/toolStore.ts","../../src/pages/Settings/settings.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../src/providers/data-service/data-service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAA0C;AACI;AAE9C,UAAU;AACyE;AAOnF;IAQI,oBAAmB,OAAsB,EAAS,WAAgC;QAAlF,iBAWC;QAXkB,YAAO,GAAP,OAAO,CAAe;QAAS,gBAAW,GAAX,WAAW,CAAqB;QAP3E,cAAS,GAAU,CAAC,CAAC;QACrB,eAAU,GAAU,CAAC,CAAC;QACtB,cAAS,GAAU,CAAC,CAAC;QACrB,gBAAW,GAAU,CAAC,CAAC;QACvB,eAAU,GAAU,EAAE,CAAC;QACvB,cAAS,GAAU,EAAE,CAAC;QAI9B,uEAAuE;QAClE,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAC,QAAQ;YAElE,KAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAEvC,mGAAmG;YACrG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,EACtC,CAAC;gBAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAAA,CAAC;QACpF,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0DAA0D;IAC1D,mCAAc,GAAd;QAAA,iBAkBC;QAhBG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,UAAC,QAAQ;YAExI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEtB,qCAAqC;YACrC,KAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAC,SAAS;gBAE1E,KAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC/B,mGAAmG;gBAC3G,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,EAAE,EAC5B,CAAC;oBAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAAA,CAAC;YAC3F,CAAC,CAAC,CAAC;QAEP,CAAC,CAAC,CAAC;IAEP,CAAC;IAEJ,sHAAsH;IACnH,iCAAY,GAAZ,UAAa,KAAK,IAChB,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAI9B,mCAAc,GAAd;QAEI,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC,WAAW,CAAC,GAAC,EAAE,CAAC,GAAC,EAAE,CAAC,CAAC;IACjG,CAAC;IAnDQ,UAAU;QAJtB,wEAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;WACG;SAC/B,CAAC;mBASoF;OARzE,UAAU,CAqDtB;IAAD,CAAC;AAAA;SArDY,UAAU;AAsDvB,gEAAgE;AAEhE,kHAAkH;AAClH,KAAiI;AACjI,IAAK;AACL,IAAI;AAGJ,wFAA0H;AAC1H,wFAAwF;AACxF,EAA6I;AAC7I,EAAE;AACF,MAAM;AACN,MAAM;AAEN,iBAA+D;AAC/D,iBAAiB;AACjB,MAA2M;AAE3M,MAAM;AACN,MAAM;AAEN,iBAAgE;AAChE,iBAAiB;AACjB,MAA2M;AAE3M,MAAM;AACN,MAAM;AAEN,iBAA8D;AAC9D,iBAAiB;AACjB,MAA2M;AAE3M,MAAM;AACN,GAAM;AACN,GAAG,mC;;;;;;;ACpGH;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kC;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kC;;;;;;;;;;;;;;;;;;;;;ACT0C;AACI;AAG9C,UAAU;AACsE;AAOhF;IAEI,mBAAmB,OAAsB,EAAS,WAAgC;QAAlF,iBAYC;QAZkB,YAAO,GAAP,OAAO,CAAe;QAAS,gBAAW,GAAX,WAAW,CAAqB;QAetF,gEAAgE;QACpD,cAAS,GAAU,CAAC,CAAC;QACrB,eAAU,GAAU,CAAC,CAAC;QACtB,gBAAW,GAAU,CAAC,CAAC;QACvB,cAAS,GAAU,CAAC,CAAC;QACrB,cAAS,GAAU,EAAE,CAAC;QAjB/B,uEAAuE;QAClE,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAC,QAAQ;YAElE,KAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAEvC,mGAAmG;YACrG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,EACtC,CAAC;gBAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAAA,CAAC;QACpF,CAAC,CAAC,CAAC;IACP,CAAC;IAWL,0DAA0D;IAC1D,kCAAc,GAAd;QAAA,iBAqBC;QAnBK,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,UAAC,QAAQ;YAExI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE9B,qCAAqC;YACpC,KAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAC,SAAS;gBAGhE,KAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,SAAS,CAAC;gBACtC,mGAAmG;gBACrG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,EAAE,EACvC,CAAC;oBAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAAA,CAAC;YACpF,CAAC,CAAC,CAAC;QAIH,CAAC,CAAC,CAAC;IAEX,CAAC;IA/CY,SAAS;QAJrB,wEAAS,CAAC;YACT,QAAQ,EAAE,wBAAwB;WACG;SACtC,CAAC;kBAGoF;OAFzE,SAAS,CAmDrB;IAAD,CAAC;AAAA;EAnDqB;AAuDtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA6SQ,qC;;;;;;;;;;;;;;;;;;;;;;;ACjXkC;AACI;AACoB;AACZ;AAE6B;AASnF;IAII,oBAAmB,OAAsB,EAAS,WAAgC;QAA/D,YAAO,GAAP,OAAO,CAAe;QAAS,gBAAW,GAAX,WAAW,CAAqB;QAHlF,mBAAc,GAAG,sFAAc,CAAC;QAC5B,eAAU,GAAG,0EAAU,CAAC;IAG5B,CAAC;IALQ,UAAU;QALtB,wEAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;WACG;SAC/B,CAAC;mBAMoF;OAJzE,UAAU,CAsFtB;IAAD,CAAC;AAAA;SAtFY,UAAU,mB;;;;;;;;;;;;;;;;;;;;ACdmB;AACI;AAM9C;IAEE,wBAAmB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IACzC,CAAC;IAHU,cAAc;QAJ1B,wEAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;WACG;SACnC,CAAC;uBAGyC;OAF9B,cAAc,CAI1B;IAAD,CAAC;AAAA;SAJY,cAAc,mB;;;;;;;;;;;;;;;;;;;;;;;;ACPe;AACI;AACU;AACT;AACe;AACrB;AAMzC;IAMI,mBAAmB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;QALzC,gBAAW,GAAG,6EAAW,CAAC;QAC1B,aAAQ,GAAG,oEAAQ,CAAC;QACpB,cAAS,GAAG,mFAAW,CAAC;QACxB,WAAM,GAAG,8DAAM,CAAC;IAIlB,CAAC;IARU,SAAS;QAJrB,wEAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;WACG;SAC9B,CAAC;kBAO2C;OANhC,SAAS,CAUrB;IAAD,CAAC;AAAA;SAVY,SAAS,mB;;;;;;;;;;;;;;;;;;;;ACXoB;AACI;AAM9C;IAEI,qBAAmB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IAEzC,CAAC;IAJQ,WAAW;QAJvB,wEAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;WACG;SAChC,CAAC;oBAG2C;OAFhC,WAAW,CAKvB;IAAD,CAAC;AAAA;SALY,WAAW,mB;;;;;;;;;;;;;;;;;;;;ACPkB;AACe;AAMzD;IAKE,kBAAmB,OAAsB,EAAS,SAAoB;QAAnD,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QACpE,8EAA8E;QAC9E,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE1C,gEAAgE;QAChE,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa;YAC9E,mBAAmB,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;QAEnD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,OAAO,GAAG,CAAC;gBAClB,IAAI,EAAE,gBAAgB,GAAG,CAAC;gBAC1B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC;iBArBU,QAAQ;IAuBnB,6BAAU,GAAV,UAAW,KAAK,EAAE,IAAI;QACpB,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAQ,EAAE;YAC1B,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IA5BU,QAAQ;QAJpB,wEAAS,CAAC;YACT,QAAQ,EAAE,eAAe;WACG;SAC7B,CAAC;iBAMsE;OAL3D,QAAQ,CA6BpB;IAAD,eAAC;;AAAA;SA7BY,QAAQ,mB;;;;;;;;;;;;;;;;;;;;ACPqB;AACI;AAM1C;IACG,qBAAmB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IAExC,CAAC;IAHQ,WAAW;QAJ3B,wEAAS,CAAC;YACT,QAAQ,EAAE,aAAa;WACW;SACnC,CAAC;oBAE8C;OAD/B,WAAW,CAIvB;IAAD,CAAC;AAAA;SAJY,WAAW,sB;;;;;;;;;;;;;;;;;;;;ACPc;AACe;AAMzD;IAKE,gBAAmB,OAAsB,EAAS,SAAoB;QAAnD,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QACpE,8EAA8E;QAC9E,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE1C,gEAAgE;QAChE,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa;YAC9E,mBAAmB,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;QAEnD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,OAAO,GAAG,CAAC;gBAClB,IAAI,EAAE,gBAAgB,GAAG,CAAC;gBAC1B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC;eArBU,MAAM;IAuBjB,2BAAU,GAAV,UAAW,KAAK,EAAE,IAAI;QACpB,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAM,EAAE;YACxB,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IA5BU,MAAM;QAJlB,wEAAS,CAAC;YACT,QAAQ,EAAE,aAAa;WACG;SAC3B,CAAC;eAMsE;OAL3D,MAAM,CA6BlB;IAAD,aAAC;;AAAA;SA7BY,MAAM,mB;;;;;;;;;;;;;;;;;;;;ACPuB;AACe;AAMzD;IAKE,eAAmB,OAAsB,EAAS,SAAoB;QAAnD,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QACpE,8EAA8E;QAC9E,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE1C,gEAAgE;QAChE,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa;YAC9E,mBAAmB,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;QAEnD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,OAAO,GAAG,CAAC;gBAClB,IAAI,EAAE,gBAAgB,GAAG,CAAC;gBAC1B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC;cArBU,KAAK;IAuBhB,0BAAU,GAAV,UAAW,KAAK,EAAE,IAAI;QACpB,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAK,EAAE;YACvB,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IA5BU,KAAK;QAJjB,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;WACO;SAC9B,CAAC;cAMsE;OAL3D,KAAK,CA6BjB;IAAD,YAAC;;AAAA;SA7BY,KAAK,uB;;;;;;;;;;;;;;;;;;;;ACPwB;AACe;AAMzD;IAKE,kBAAmB,OAAsB,EAAS,SAAoB;QAAnD,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QACpE,8EAA8E;QAC9E,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE1C,gEAAgE;QAChE,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa;YAC9E,mBAAmB,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;QAEnD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,OAAO,GAAG,CAAC;gBAClB,IAAI,EAAE,gBAAgB,GAAG,CAAC;gBAC1B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC;iBArBU,QAAQ;IAuBnB,6BAAU,GAAV,UAAW,KAAK,EAAE,IAAI;QACpB,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAQ,EAAE;YAC1B,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IA5BU,QAAQ;QAJpB,wEAAS,CAAC;YACT,QAAQ,EAAE,eAAe;WACG;SAC7B,CAAC;iBAMsE;OAL3D,QAAQ,CA6BpB;IAAD,eAAC;;AAAA;SA7BY,QAAQ,mB;;;;;;;;;;;ACPsD;AAElC;AAEzC,yGAAsB,EAAE,CAAC,eAAe,CAAC,8DAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJM;AACH;AACkB;AAEjC;AACxC,gDAAgD;AAChD,gDAAgD;AACiB;AACW;AACY;AACZ;AACnB;AACc;AACT;AACe;AACrB;AACP;AACK;AAED;AACM;AAG3D,SAAS;AACkC;AAE3C,WAAW;AACkE;AAsD7E;IAAA;IAAwB,CAAC;IAAZ,SAAS;QAnDrB,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,6DAAK;gBACT,eAAe;gBACf,eAAe;gBACX,qFAAS;gBACT,gGAAU;gBACV,4GAAc;gBACd,gGAAU;gBACV,6EAAS;gBACT,6FAAW;gBACX,qFAAQ;gBACR,oGAAW;gBACX,+EAAM;gBACN,sEAAK;gBACL,2EAAQ;aACT;YACD,OAAO,EAAE;gBACP,gFAAa;gBACb,kEAAW,CAAC,OAAO,CAAC,6DAAK,EAAE,EAAE,EACjC;oBACE,KAAK,EAAE,EAEN;iBACF,CAAC;gBACE,kEAAU;aACX;YACD,SAAS,EAAE,CAAC,+DAAQ,CAAC;YACrB,eAAe,EAAE;gBACf,6DAAK;gBACT,eAAe;gBACf,eAAe;gBACX,qFAAS;gBACT,gGAAU;gBACV,4GAAc;gBACd,gGAAU;gBACV,6EAAS;gBACT,6FAAW;gBACX,qFAAQ;gBACR,oGAAW;gBACX,+EAAM;gBACN,sEAAK;gBACL,2EAAQ;aACT;YACD,SAAS,EAAE;gBACT,4EAAS;gBACT,kFAAY;gBACZ,EAAC,OAAO,EAAE,mEAAY,EAAE,QAAQ,EAAE,wEAAiB,EAAC;gBACpD,kGAAmB;aACtB;SACA,CAAC;OACW,SAAS,CAAG;IAAD,gBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjF+B;AACP;AACO;AACM;AAE3D,gDAAgD;AAChD,gDAAgD;AACiB;AACW;AAC5E,0FAA0F;AACd;AACnB;AACzD,2EAA2E;AAC3E,kEAAkE;AAClE,iFAAiF;AACjF,4DAA4D;AACX;AACK;AAMtD;IAOE,eAAmB,QAAkB,EAAS,SAAoB,EAAS,YAA0B;QAAlF,aAAQ,GAAR,QAAQ,CAAU;QAAS,cAAS,GAAT,SAAS,CAAW;QAAS,iBAAY,GAAZ,YAAY,CAAc;QAJrG,aAAQ,GAAQ,qFAAS,CAAC;QAKxB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,8CAA8C;QAC9C,4DAA4D;QAC5D,IAAI,CAAC,KAAK,GAAG;YACjB,+CAA+C;YAC/C,+CAA+C;YACzC,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,qFAAS,EAAE;YAC5C,EAAE,KAAK,EAAE,aAAa,EAAE,SAAS,EAAE,gGAAU,EAAE;YACrD,0DAA0D;YACpD,EAAE,KAAK,EAAE,aAAa,EAAE,SAAS,EAAE,gGAAU,EAAE;YAC/C,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,6EAAS,EAAE;YAClD,sFAAsF;YACtF,mDAAmD;YACnD,6DAA6D;YAC7D,+CAA+C;YACzC,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,qEAAK,EAAE;YACpC,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,0EAAQ,EAAE;SAC3C,CAAC;IAEJ,CAAC;IAED,6BAAa,GAAb;QAAA,iBAOC;QANC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;YACzB,gEAAgE;YAChE,iEAAiE;YACjE,KAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;YAC9B,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wBAAQ,GAAR,UAAS,IAAI;QACX,+CAA+C;QAC/C,4DAA4D;QAC5D,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IA1Ce;QAAf,yEAAS,CAAC,0DAAG,CAAC;kCAAM,0DAAG;sCAAC;IADd,KAAK;QAHjB,wEAAS,CAAC;WACc;SACxB,CAAC;cAQqG;OAP1F,KAAK,CA4CjB;IAAD,CAAC;AAAA;SA5CY,KAAK,2B;;;;;;;;;;;;;;;;;;;;;;ACvByB;AACI;AAChB;AAG/B,SAAS;AAET;;;;;EAKE;AAEF;IAEE,6BAAmB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAI/B,qEAAqE;QAC9D,aAAQ,GAAS,EAAE,CAAC;QAE3B,0BAA0B;QAClB,qBAAgB,GAAW,sCAAsC,CAAC;IARxC,CAAC;IAWnC,wDAAwD;IACrD,4CAAc,GAAd,UAAe,QAAQ;QACpB,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;YACjB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC;IACN,CAAC;IAAA,CAAC;IAGJ,0CAA0C;IAC1C,+IAA+I;IAC/I,kDAAoB,GAApB,UAAqB,SAAgB,EAAE,UAAkB,EAAE,WAAmB,EAAE,SAAiB,EAAE,SAAgB;QAE/G,IACA,CAAC;YACC,IAAI,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,IAAI,GAAG,2DAA2D,CAAC;YACvE,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAC,SAAS,EAAE,WAAW,EAAC,OAAO,EAAE,CAAC,CAAC;YACzK,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EAAE,WAAW,EAAE,UAAU,EAAE,IAAI,EAAC,wBAAwB,EAAC,WAAW,EAAC,4BAA4B,EAAC,QAAQ,EAAC,QAAQ,EAAC,CAAC,CAAC;YACxL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;QAC3D,CAAC;QACD,KAAK,EAAC,GAAG,CAAC,CACV,CAAC;YACC,KAAK,CAAC,sBAAsB,GAAG,GAAG,CAAC,CAAC;QACtC,CAAC;IACL,CAAC;IAED,iEAAiE;IACjE,mDAAqB,GAArB,UAAsB,WAAkB;QAEtC,IAAI,IAAI,GAAG,0DAA0D,CAAC;QACtE,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EAAE,WAAW,EAAE,WAAW,EAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IAC3D,CAAC;IAED,uBAAuB;IACrB,wBAAwB;IACxB,mCAAK,GAAL,UAAM,IAAW,EAAE,IAAW;QAExB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IAC/D,CAAC;IApDU,mBAAmB;QAD/B,yEAAU,EAAE;yCAGc,2DAAI;OAFlB,mBAAmB,CAsD/B;IAAD,0BAAC;CAAA;AAtD+B","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n//services\nimport { DataServiceProvider } from '../../../providers/data-service/data-service';\n\n\n@Component({\n  selector: 'page-dailyEntry',\n  templateUrl: 'dailyEntry.html'\n})\nexport class DailyEntry {\n    public moodScore:number = 5;\n    public sleepScore:number = 5;\n    public dietScore:number = 5;\n    public stressScore:number = 5;\n    public totalScore:number = 10;\n    public entryNote:string = \"\";\n        \n    constructor(public navCtrl: NavController, public dataService: DataServiceProvider ) {\n        \n  \t//automatically load the wellness tracker listing when the page arrives\n        this.dataService.wellness_tracker_list(\"wellness\").subscribe((response)=> \n        {\n            this.dataService.wellness = response;\n\n          //convert the JSON text to a JSON object so you can reference it as wellness.moodScore in the ngFor\n      \t\tfor (var a = 0; a < response.length;a++)\n\t      \t\t{this.dataService.wellness[a] = JSON.parse(this.dataService.wellness[a].jsondata);}\n        });\n    }\n\n    //a simple function to submit the scores into the database\n    submitWellness()\n    {\n        this.dataService.wellness_tracker_add(this.moodScore, this.sleepScore, this.stressScore, this.dietScore, this.entryNote).subscribe((response)=> \n        {\n            alert(\"Score Submitted\");\n            console.log(response);\n\n            //load the latest version from the DB\n            this.dataService.wellness_tracker_list(\"wellness\").subscribe((response2)=> \n            {\n        \tthis.dataService.wellness = response2;\n                //convert the JSON text to a JSON object so you can reference it as wellness.moodScore in the ngFor\n      \t\tfor (var a = 0; a < response2.length;a++)\n                    {this.dataService.wellness[a] = JSON.parse(this.dataService.wellness[a].jsondata);}\n            });\n            \n        });\n\n    }\n    \n\t// Given a number, this method will reverse it. 10 = 1, 9 = 2, 8 = 3, 7 = 4, 6 = 5, 5 = 6, 4 = 7, 3 = 8, 2 = 9, 1 = 10\n    reverseScore(score) \n    { return ((10 - score) + 1); }\n    \n    \n    \n    calcTotalScore()\n    {\n        this.totalScore = (((this.moodScore+this.sleepScore+this.dietScore+this.stressScore)/40)*10);\n    }\n\n}\n//define the variables to link with the ngModel in the main page\n    \n//    \t\t$scope.updatePicture = function(totalScore, moodScore, sleepScore, dietScore, scoreManager, stressScore) {\n//\t\t\ttotalScore = ((parseInt(moodScore) + parseInt(sleepScore) + parseInt(dietScore) + parseInt(stressScore)) / 4); //Added by JW\n//\t\t}\n//\t\t\n\t\t\n\t\t\n//\t\t$scope.$watch(function( totalScore, moodScore, sleepScore, dietScore, scoreManager, stressScore) { return moodScore },\n//\t\t\tfunction(totalScore, moodScore, sleepScore, dietScore, scoreManager, stressScore) {\n//\t\t\t\ttotalScore = ((parseInt(moodScore) + parseInt(sleepScore) + parseInt(dietScore) + parseInt(stressScore)) / 4).toFixed(0); //Added by JW\n//\n//\t\t\t}\n//\t\t);\n\t\t\n//\t\t$scope.$watch(function(scope) { return $scope.sleepScore },\n//\t\t\tfunction() {\n//\t\t\t\t$scope.totalScore = ((parseInt($scope.moodScore) + parseInt($scope.sleepScore) + parseInt($scope.dietScore) + scoreManager.reverseScore(parseInt($scope.stressScore))) / 4).toFixed(0); //Added by JW\n\n//\t\t\t}\n//\t\t);\n\t\t\n//\t\t$scope.$watch(function(scope) { return $scope.stressScore },\n//\t\t\tfunction() {\n//\t\t\t\t$scope.totalScore = ((parseInt($scope.moodScore) + parseInt($scope.sleepScore) + parseInt($scope.dietScore) + scoreManager.reverseScore(parseInt($scope.stressScore))) / 4).toFixed(0); //Added by JW\n\n//\t\t\t}\n//\t\t);\n\t\t\n//\t\t$scope.$watch(function(scope) { return $scope.dietScore },\n//\t\t\tfunction() {\n//\t\t\t\t$scope.totalScore = ((parseInt($scope.moodScore) + parseInt($scope.sleepScore) + parseInt($scope.dietScore) + scoreManager.reverseScore(parseInt($scope.stressScore))) / 4).toFixed(0); //Added by JW\n\n//\t\t\t}\n//\t\t);\n//}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/WellnessTracker/DailyEntry/dailyEntry.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 111;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/esm5 lazy\n// module id = 111\n// module chunks = 0","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 153;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 153\n// module chunks = 0","\nimport { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n\n//services\nimport { DataServiceProvider } from '../../providers/data-service/data-service';\n\n\n@Component({\n  selector: 'page-analyticDashboard',\n  templateUrl: 'analyticDashboard.html'\n})\nexport class Dashboard {\n\n    constructor(public navCtrl: NavController, public dataService: DataServiceProvider) \n\n    {\n  \t//automatically load the wellness tracker listing when the page arrives\n        this.dataService.wellness_tracker_list(\"wellness\").subscribe((response)=> \n        {\n            this.dataService.wellness = response;\n\n          //convert the JSON text to a JSON object so you can reference it as wellness.moodScore in the ngFor\n      \t\tfor (var a = 0; a < response.length;a++)\n\t      \t\t{this.dataService.wellness[a] = JSON.parse(this.dataService.wellness[a].jsondata);}\n        });\n    }\n\n\n//define the variables to link with the ngModel in the main page\n    private moodScore:number = 1;\n    private sleepScore:number = 1;\n    private stressScore:number = 1;\n    private dietScore:number = 1;\n    private entryNote:string = \"\";\n\n  \n//a simple function to submit the scores into the database\nsubmitWellness()\n{\n      this.dataService.wellness_tracker_add(this.moodScore, this.sleepScore, this.stressScore, this.dietScore, this.entryNote).subscribe((response)=> \n        {\n          alert(\"Score Submitted\");\n          console.log(response);\n\n\t\t//load the latest version from the DB\n\t\t this.dataService.wellness_tracker_list(\"wellness\").subscribe((response2)=> \n        {\n\n        \t this.dataService.wellness = response2;\n          //convert the JSON text to a JSON object so you can reference it as wellness.moodScore in the ngFor\n      \t\tfor (var a = 0; a < response2.length;a++)\n\t      \t\t{this.dataService.wellness[a] = JSON.parse(this.dataService.wellness[a].jsondata);}\n        });\n\n\n\n        });\n\n}\n\n\n\n}\n\n\n\n/*\n//------------------ Analytic Dashboard Controller --------------------\napp.controller('analyticDashboardCtrl', ['$scope', \"queryService\", \"translationService\", \"$window\", function($scope, queryService, translationService, $window){\n\t\n\t// Check to see if a user is logged in, if not, redirect to login screen\n\tif(localStorage.getItem(\"user\") != null) {\n\t\t\n\t\t// Mood = 0, sleep = 1, stress = 2, diet = 3 \n\t\t$scope.graphColours = [\"#FF9800\", \"#01579B\", \"#D32F2F\", \"#4CAF50\"];\n\t\t\n\t\t// Form values\n\t\t$scope.userInput = {\n\t\t\tmoodCheckbox: false,\n\t\t\tsleepCheckbox: false,\n\t\t\tstressCheckbox: false,\n\t\t\tdietCheckbox: false,\n\t\t\tfromDate: new Date(),\n\t\t\ttoDate: new Date()\n\t\t}\n\t\t\n\t\t// Page elements\n\t\t$scope.pageElements = translationService.translate(\"analyticDashboard.html\");\n\n\t\t$scope.redirectToCheckinLog = function() {\n\t\t\t$window.location.href= \"#/checkinLog\";\n\t\t}\n\t\t\n\t\t// Launch function\n\t\t$scope.pageLoad = function() {\n\t\t\t// Tell our loading bar that the back-end has started\n\t\t\t$scope.pageElements.loadStarted = true;\n\t\t\t\n\t\t\t// Set up our dates for last month\n\t\t\t\n\t\t\t// Grab both our dates\n\t\t\tvar today = moment(new Date()).format('YYYY-MM-DD HH:mm:ss');\n\t\t\tvar todayMinusAMonth = moment().subtract(1, 'months').format('YYYY-MM-DD HH:mm:ss');\n\t\t\t\t\n\t\t\t// Set the times to their min or max hour accordingly\n\t\t\tvar finalTodayDate = new String(today.slice(0, 10) + ' 23' + today.slice(13, today.length));\n\t\t\tvar finalTodayMinusAMonth = new String(todayMinusAMonth.slice(0, 10) + ' 00' + todayMinusAMonth.slice(13, todayMinusAMonth.length));\n\n\t\t\t// Turn them into a string object so we can use them in our queries\n\t\t\tfinalTodayDate = finalTodayDate.toString();\n\t\t\tfinalTodayMinusAMonth = finalTodayMinusAMonth.toString();\n\t\t\t\n\t\t\t// Call the method to generate the chart\n\t\t\t$scope.generateChart(finalTodayMinusAMonth, finalTodayDate, true);\n\t\t}\n\t\t\n\t\t// Called when \"Generate\" button is clicked, creates a chart\n\t\t$scope.generateChart = function(fromDate, toDate, pageLaunchFlag) {\n\t\t\t\n\t\t\tif(pageLaunchFlag === null) pageLaunchFlag = false;\n\t\t\t\n\t\t\t// Tell our loading bar that the back-end has started\n\t\t\t$scope.pageElements.loadStarted = true;\n\t\t\t\n\t\t\t// Reset our counters\n\t\t\t$scope.totalAverage = 0;\n\t\t\t$scope.totalCheckins = 0;\n\t\t\t$scope.moodScoreAverage = 0;\n\t\t\t$scope.stressScoreAverage = 0;\n\t\t\t$scope.dietScoreAverage = 0;\n\t\t\t$scope.sleepScoreAverage = 0;\n\t\t\t\n\t\t\t$scope.pageElements.maximizeButton = !$scope.pageElements.maximizeButton;\n\t\t\t$scope.pageElements.showOutput = true;\n\t\t\t\n\t\t\t// Display the appropriate elements if their checkbox was selected\n\t\t\tif($scope.userInput.moodCheckbox || pageLaunchFlag) {\n\t\t\t\t$scope.pageElements.moodValues = true;\n\t\t\t} else {\n\t\t\t\t$scope.pageElements.moodValues = false;\n\t\t\t}\n\t\t\t\n\t\t\tif($scope.userInput.stressCheckbox || pageLaunchFlag) {\n\t\t\t\t$scope.pageElements.stressValues = true;\n\t\t\t} else {\n\t\t\t\t$scope.pageElements.stressValues = false;\n\t\t\t}\n\t\t\t\n\t\t\tif($scope.userInput.dietCheckbox || pageLaunchFlag) {\n\t\t\t\t$scope.pageElements.dietValues = true;\n\t\t\t} else {\n\t\t\t\t$scope.pageElements.dietValues = false;\n\t\t\t}\n\t\t\t\n\t\t\tif($scope.userInput.sleepCheckbox || pageLaunchFlag) {\n\t\t\t\t$scope.pageElements.sleepValues = true;\n\t\t\t} else {\n\t\t\t\t$scope.pageElements.sleepValues = false;\n\t\t\t}\n\t\t\t\n\t\t\tvar selectStatement = \"\";\n\t\t\tvar whereClause = \"\";\n\t\t\t\n\t\t\t// We need to fill variables depending on whether they were selected or not (We avoid string building doing it this way)\n\t\t\tvar moodScore = \"\";\n\t\t\tvar stressScore = \"\";\n\t\t\tvar dietScore = \"\";\n\t\t\tvar sleepScore = \"\";\n\t\t\t\n\t\t\tif($scope.userInput.moodCheckbox || pageLaunchFlag) {\n\t\t\t\tmoodScore = \"moodScore, \";\n\t\t\t}\n\t\t\t\n\t\t\tif($scope.userInput.stressCheckbox || pageLaunchFlag) {\n\t\t\t\tstressScore = \"stressScore, \";\n\t\t\t}\n\t\t\t\n\t\t\tif($scope.userInput.dietCheckbox || pageLaunchFlag) {\n\t\t\t\tdietScore = \"dietScore, \";\n\t\t\t}\n\t\t\t\n\t\t\tif($scope.userInput.sleepCheckbox || pageLaunchFlag) {\n\t\t\t\tsleepScore = \"sleepScore, \";\n\t\t\t}\n\t\t\t\n\t\t\tif(!pageLaunchFlag) {\n\t\t\t\n\t\t\t\t// Format our dates\n\t\t\t\tvar fromDate = moment(fromDate).format('YYYY-MM-DD HH:mm:ss');\n\t\t\t\tvar toDate = moment(toDate).format('YYYY-MM-DD HH:mm:ss');\n\t\t\t\t\t\n\t\t\t\t// Set the times to their min or max hour accordingly\n\t\t\t\tvar finalFromDate = new String(fromDate.slice(0, 10) + ' 00' + fromDate.slice(13, fromDate.length));\n\t\t\t\tvar finalToDate = new String(toDate.slice(0, 10) + ' 23' + toDate.slice(13, toDate.length));\n\n\t\t\t\t// Turn them into a string object so we can use them in our queries\n\t\t\t\tfromDate = finalFromDate.toString();\n\t\t\t\ttoDate = finalToDate.toString();\n\t\t\t}\n\t\t\t\n\t\t\t// Generating the select and where clause\n\t\t\tselectStatement = moodScore + stressScore + dietScore + sleepScore + \"dateEntered\";\t\t\n\t\t\twhereClause = \"userID = '\" + localStorage.getItem(\"user\") + \"' AND dateEntered BETWEEN DATETIME('\" + fromDate + \"') AND DATETIME('\" + toDate + \"') ORDER BY dateEntered DESC\";\n\n\t\t\t// Query the actual line graph data\n\t\t\tqueryService.selectQuery(selectStatement, \"wellnessTrackerEntries\", whereClause).then(function(response) {\n\t\t\t\t$scope.entries = response.data;\n\t\t\t\n\t\t\t\tvar labelsArray = [];\n\t\t\t\t\n\t\t\t\tvar moodScoreArray = [];\n\t\t\t\tvar stressScoreArray = [];\n\t\t\t\tvar dietScoreArray = [];\n\t\t\t\tvar sleepScoreArray = [];\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar moodScoreTotal = 0;\n\t\t\t\tvar stressScoreTotal = 0;\n\t\t\t\tvar dietScoreTotal = 0;\n\t\t\t\tvar sleepScoreTotal = 0;\n\t\t\t\t\n\t\t\t\t$scope.totalCheckins = 0;\n\t\t\t\t\n\t\t\t\t// Each array is aligned, apply the actual values from our query\n\t\t\t\tfor(var i = 0; i < $scope.entries.length; i++) {\n\t\t\t\t\t\n\t\t\t\t\t$scope.totalCheckins++;\n\t\t\t\t\t\n\t\t\t\t\tlabelsArray[i] = $scope.entries[i].dateEntered;\n\t\t\t\t\t\n\t\t\t\t\tif($scope.userInput.moodCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\tmoodScoreArray[i] = $scope.entries[i].moodScore;\n\t\t\t\t\t\tmoodScoreTotal = moodScoreTotal + parseInt($scope.entries[i].moodScore);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif($scope.userInput.stressCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\tstressScoreArray[i] = $scope.entries[i].stressScore;\n\t\t\t\t\t\tstressScoreTotal = stressScoreTotal + parseInt($scope.entries[i].stressScore);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif($scope.userInput.dietCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\tdietScoreArray[i] = $scope.entries[i].dietScore;\n\t\t\t\t\t\tdietScoreTotal = dietScoreTotal + parseInt($scope.entries[i].dietScore);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif($scope.userInput.sleepCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\tsleepScoreArray[i] = $scope.entries[i].sleepScore;\n\t\t\t\t\t\tsleepScoreTotal = sleepScoreTotal + parseInt($scope.entries[i].sleepScore);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If their appropriate checkbox is selected, calculate the average score\n\t\t\t\tif($scope.userInput.moodCheckbox || pageLaunchFlag) $scope.moodScoreAverage = (moodScoreTotal / $scope.totalCheckins).toFixed(2);\n\t\t\t\tif($scope.userInput.stressCheckbox || pageLaunchFlag) $scope.stressScoreAverage = (stressScoreTotal / $scope.totalCheckins).toFixed(2);\n\t\t\t\tif($scope.userInput.dietCheckbox || pageLaunchFlag) $scope.dietScoreAverage = (dietScoreTotal / $scope.totalCheckins).toFixed(2);\n\t\t\t\tif($scope.userInput.sleepCheckbox || pageLaunchFlag) $scope.sleepScoreAverage = (sleepScoreTotal / $scope.totalCheckins).toFixed(2);\n\t\t\t\t\n\t\t\t\t// Build our graph object\n\t\t\t\tvar graphDataSets = [];\n\t\t\t\t\n\t\t\t\t// If moodCheckbox was selected, build our mood line\n\t\t\t\tif($scope.userInput.moodCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\n\t\t\t\t\tvar moodCheckboxIndex = graphDataSets.length;\n\t\t\t\t\t\n\t\t\t\t\tgraphDataSets[graphDataSets.length] = { \n\t\t\t\t\t\tdata: moodScoreArray,\n\t\t\t\t\t\tlabel: $scope.pageElements.moodText,\n\t\t\t\t\t\tborderColor: $scope.graphColours[0],\n\t\t\t\t\t\tfill: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If stressCheckbox was selected, build our stress line\n\t\t\t\tif($scope.userInput.stressCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\n\t\t\t\t\tvar stressCheckboxIndex = graphDataSets.length;\n\t\t\t\t\t\n\t\t\t\t\tgraphDataSets[graphDataSets.length] = { \n\t\t\t\t\t\tdata: stressScoreArray,\n\t\t\t\t\t\tlabel: $scope.pageElements.stressText,\n\t\t\t\t\t\tborderColor: $scope.graphColours[2],\n\t\t\t\t\t\tfill: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If dietCheckbox was selected, build our diet line\n\t\t\t\tif($scope.userInput.dietCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\n\t\t\t\t\tvar dietCheckboxIndex = graphDataSets.length;\n\t\t\t\t\t\n\t\t\t\t\tgraphDataSets[graphDataSets.length] = { \n\t\t\t\t\t\tdata: dietScoreArray,\n\t\t\t\t\t\tlabel: $scope.pageElements.dietText,\n\t\t\t\t\t\tborderColor: $scope.graphColours[3],\n\t\t\t\t\t\tfill: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If sleepCheckbox was selected, build our sleep quality line\n\t\t\t\tif($scope.userInput.sleepCheckbox || pageLaunchFlag) {\n\t\t\t\t\t\n\t\t\t\t\tvar sleepCheckboxIndex = graphDataSets.length;\n\t\t\t\t\t\n\t\t\t\t\tgraphDataSets[graphDataSets.length] = { \n\t\t\t\t\t\tdata: sleepScoreArray,\n\t\t\t\t\t\tlabel: $scope.pageElements.sleepText,\n\t\t\t\t\t\tborderColor: $scope.graphColours[1],\n\t\t\t\t\t\tfill: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar datasetsObject = [];\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif($scope.userInput.moodCheckbox || pageLaunchFlag) {\n\t\t\t\t\tdatasetsObject[datasetsObject.length] = {label: graphDataSets[moodCheckboxIndex].label, data: graphDataSets[moodCheckboxIndex].data, borderColor: graphDataSets[moodCheckboxIndex].borderColor, fill: graphDataSets[moodCheckboxIndex].fill};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif($scope.userInput.stressCheckbox || pageLaunchFlag) {\n\t\t\t\t\tdatasetsObject[datasetsObject.length] = {label: graphDataSets[stressCheckboxIndex].label, data: graphDataSets[stressCheckboxIndex].data, borderColor: graphDataSets[stressCheckboxIndex].borderColor, fill: graphDataSets[stressCheckboxIndex].fill};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif($scope.userInput.dietCheckbox || pageLaunchFlag) {\n\t\t\t\t\tdatasetsObject[datasetsObject.length] = {label: graphDataSets[dietCheckboxIndex].label, data: graphDataSets[dietCheckboxIndex].data, borderColor: graphDataSets[dietCheckboxIndex].borderColor, fill: graphDataSets[dietCheckboxIndex].fill};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif($scope.userInput.sleepCheckbox || pageLaunchFlag) {\n\t\t\t\t\tdatasetsObject[datasetsObject.length] = {label: graphDataSets[sleepCheckboxIndex].label, data: graphDataSets[sleepCheckboxIndex].data, borderColor: graphDataSets[sleepCheckboxIndex].borderColor, fill: graphDataSets[sleepCheckboxIndex].fill};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar chartDiv = document.getElementById(\"chartDiv\");\n\t\t\t\tchartDiv.innerHTML = '<canvas id=\"mainChart\"></canvas>';\n\t\t\t\t\n\t\t\t\t// Generate Chart\n\t\t\t\tvar mainChart = new Chart(document.getElementById(\"mainChart\").getContext('2d'), {\n\t\t\t\t\t\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tlabels: labelsArray,\n\t\t\t\t\t\tdatasets: datasetsObject\n\t\t\t\t\t},\n\t\t\t\t\toptions: {\t\t\t\t\t\n\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\txAxes: [{\n\t\t\t\t\t\t\t\ttype: 'time',\n\t\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t\tdisplayFormats: {\n\t\t\t\t\t\t\t\t\t\tquarter: 'MMM D'\n\n                                                                       \n                                                                                                                                                \t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}] \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$scope.pageElements.loadComplete = true;\n\t\t\t});\n\t\t}\n\t\t\n\t\t$scope.pageLoad();\n\t} else {\n\t\t$window.location.href = \"#/home\";\n\t}\n\t\n//}]);*/ \n\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Dashboard/analyticDashboard.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport { CheckinLogInfo } from '../CheckinLogInfo/checkinLogInfo';\nimport { DailyEntry } from '../DailyEntry/dailyEntry';\n\nimport { DataServiceProvider } from '../../../providers/data-service/data-service';\n\n\n\n@Component({\n  selector: 'page-checkinLog',\n  templateUrl: 'checkinLog.html'\n})\n\nexport class CheckinLog {\n    checkinLogInfo = CheckinLogInfo;\n        dailyentry = DailyEntry;\n\n    constructor(public navCtrl: NavController, public dataService: DataServiceProvider) {\n    }\n\n/*\n * //------------------ Checkin Log Controller Controller --------------------\napp.controller('CheckinLogInfoCtrl', ['$scope', \"$routeParams\", \"$location\", \"$window\", \"entryList\", \"scoreManager\", \"translationService\", function($scope, $routeParams, $location, $window, entryList, scoreManager, translationService){\n\n\t// Check to see if a user is logged in, if not, redirect to login screen\n//\tif(localStorage.getItem(\"user\") != null) {\n\t\t\n\t\t$scope.pageElements = translationService.translate(\"checkinLogInfo.html\");\n\t\t\n\t\tvar id = $routeParams.id, currentIndex;\n\n\t\t$scope.entry = null;\n\t\t$scope.hasNext = true;\n\t\t$scope.hasPrev = true;\n\t\t$scope.nextEntry = nextEntry;\n\t\t$scope.prevEntry = prevEntry;\n\t\t\n\t\t$scope.notesProvided = true;\n\n\t\tsetEntry();\n\t\t\n\t\t// Calculate the total score of the checkin, and then use it to display the appropriate images\n\t\t$scope.checkinTotal = ((parseInt($scope.entry.moodScore) + parseInt($scope.entry.sleepScore) + scoreManager.reverseScore(parseInt($scope.entry.stressScore)) + parseInt($scope.entry.dietScore)) / 4).toFixed(0);\n\t\t\n\t\t// Check if the note is blank, if so, enable our \"No notes were entered\" element.\n\t\tif($scope.entry.entryNote === null) {\n\t\t\t$scope.notesProvided = false;\n\t\t}\n\t\t\n\t\tfunction setEntry() {\n\n\t\t\tfor(var i = 0, len = entryList.length; i < len; i++){\n\t\t\t\tvar entry = entryList[i];\n\n\t\t\t\tif (entry.entryID === id){\n\t\t\t\t\t$scope.entry = entry;\n\t\t\t\t\tcurrentIndex = i;\n\t\t\t\t\tsetHasNext();\n\t\t\t\t\tsetHasPrev();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction nextEntry(){\n\t\t\tif ($scope.hasNext) {\n\t\t\t\tcurrentIndex++;\n\t\t\t\tupdateUrl();\n\t\t\t}\n\t\t}\n\n\t\tfunction prevEntry(){\n\t\t\tif($scope.hasPrev) {\n\t\t\t\tcurrentIndex--;\n\t\t\t\tupdateUrl();\n\t\t\t}\n\t\t}\n\n\t\tfunction updateUrl(){\n\t\t\tif (currentIndex <= entryList.length - 1 && currentIndex >= 0) {\n\t\t\t\tvar entryId = entryList[currentIndex].entryID;\n\t\t\t\t$location.path(\"checkinLogInfo/\" + entryId);\n\t\t\t}\n\t\t}\n\n\t\tfunction setHasNext(){\n\t\t\t$scope.hasNext = currentIndex < entryList.length - 1;\n\t\t}\n\n\t\tfunction setHasPrev(){\n\t\t\t$scope.hasPrev = currentIndex !== 0;\n\t\t}\n\t} else {\n\t\t$window.location.href = \"#/home\";\n\t}\n}]);\n\n * \n */    \n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/WellnessTracker/CheckinLog/checkinLog.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n@Component({\n  selector: 'page-checkinLogInfo',\n  templateUrl: 'checkinLogInfo.html'\n})\nexport class CheckinLogInfo {\n\n  constructor(public navCtrl: NavController) {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/WellnessTracker/CheckinLogInfo/checkinLogInfo.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\nimport { CSCContacts } from './CscContacts/cscContacts';\nimport { Employee } from './Employee/employee';\nimport { EmployeeFam } from './EmployeeFamily/employeeFamily';\nimport { Public } from './Public/public';\n\n@Component({\n  selector: 'page-resources',\n  templateUrl: 'Resources.html'\n})\nexport class Resources {\n    cscContacts = CSCContacts;\n    employee = Employee;\n    empfamily = EmployeeFam;\n    public = Public;\n    \n    constructor(public navCtrl: NavController) {\n   \n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Resources/resources.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n@Component({\n  selector: 'page-cscContacts',\n  templateUrl: 'cscContacts.html'\n})\nexport class CSCContacts {\n    \n    constructor(public navCtrl: NavController) {\n    \n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Resources/CscContacts/cscContacts.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n\n@Component({\n  selector: 'page-employee',\n  templateUrl: 'employee.html'\n})\nexport class Employee {\n  selectedItem: any;\n  icons: string[];\n  items: Array<{title: string, note: string, icon: string}>;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\n    // If we navigated to this page, we will have an item available as a nav param\n    this.selectedItem = navParams.get('item');\n\n    // Let's populate this page with some filler content for funzies\n    this.icons = ['flask', 'wifi', 'beer', 'football', 'basketball', 'paper-plane',\n    'american-football', 'boat', 'bluetooth', 'build'];\n\n    this.items = [];\n    for (let i = 1; i < 11; i++) {\n      this.items.push({\n        title: 'Item ' + i,\n        note: 'This is item #' + i,\n        icon: this.icons[Math.floor(Math.random() * this.icons.length)]\n      });\n    }\n  }\n\n  itemTapped(event, item) {\n    // That's right, we're pushing to ourselves!\n    this.navCtrl.push(Employee, {\n      item: item\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Resources/Employee/employee.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n@Component({\n  selector: 'page-family',\n  templateUrl: 'employeeFamily.html'\n})\n    export class EmployeeFam {\n       constructor(public navCtrl: NavController) {\n\n        }\n    }\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Resources/EmployeeFamily/employeeFamily.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n\n@Component({\n  selector: 'page-public',\n  templateUrl: 'public.html'\n})\nexport class Public {\n  selectedItem: any;\n  icons: string[];\n  items: Array<{title: string, note: string, icon: string}>;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\n    // If we navigated to this page, we will have an item available as a nav param\n    this.selectedItem = navParams.get('item');\n\n    // Let's populate this page with some filler content for funzies\n    this.icons = ['flask', 'wifi', 'beer', 'football', 'basketball', 'paper-plane',\n    'american-football', 'boat', 'bluetooth', 'build'];\n\n    this.items = [];\n    for (let i = 1; i < 11; i++) {\n      this.items.push({\n        title: 'Item ' + i,\n        note: 'This is item #' + i,\n        icon: this.icons[Math.floor(Math.random() * this.icons.length)]\n      });\n    }\n  }\n\n  itemTapped(event, item) {\n    // That's right, we're pushing to ourselves!\n    this.navCtrl.push(Public, {\n      item: item\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Resources/Public/public.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n\n@Component({\n  selector: 'page-tools',\n  templateUrl: 'toolStore.html'\n})\nexport class Tools {\n  selectedItem: any;\n  icons: string[];\n  items: Array<{title: string, note: string, icon: string}>;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\n    // If we navigated to this page, we will have an item available as a nav param\n    this.selectedItem = navParams.get('item');\n\n    // Let's populate this page with some filler content for funzies\n    this.icons = ['flask', 'wifi', 'beer', 'football', 'basketball', 'paper-plane',\n    'american-football', 'boat', 'bluetooth', 'build'];\n\n    this.items = [];\n    for (let i = 1; i < 11; i++) {\n      this.items.push({\n        title: 'Item ' + i,\n        note: 'This is item #' + i,\n        icon: this.icons[Math.floor(Math.random() * this.icons.length)]\n      });\n    }\n  }\n\n  itemTapped(event, item) {\n    // That's right, we're pushing to ourselves!\n    this.navCtrl.push(Tools, {\n      item: item\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Tools/toolStore.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams } from 'ionic-angular';\n\n@Component({\n  selector: 'page-settings',\n  templateUrl: 'settings.html'\n})\nexport class Settings {\n  selectedItem: any;\n  icons: string[];\n  items: Array<{title: string, note: string, icon: string}>;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\n    // If we navigated to this page, we will have an item available as a nav param\n    this.selectedItem = navParams.get('item');\n\n    // Let's populate this page with some filler content for funzies\n    this.icons = ['flask', 'wifi', 'beer', 'football', 'basketball', 'paper-plane',\n    'american-football', 'boat', 'bluetooth', 'build'];\n\n    this.items = [];\n    for (let i = 1; i < 11; i++) {\n      this.items.push({\n        title: 'Item ' + i,\n        note: 'This is item #' + i,\n        icon: this.icons[Math.floor(Math.random() * this.icons.length)]\n      });\n    }\n  }\n\n  itemTapped(event, item) {\n    // That's right, we're pushing to ourselves!\n    this.navCtrl.push(Settings, {\n      item: item\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Settings/settings.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n\nimport { MyApp } from './app.component';\n//import { HomePage } from '../pages/home/home';\n//import { ListPage } from '../pages/list/list';\nimport { Dashboard } from '../pages/Dashboard/analyticDashboard';\nimport { DailyEntry } from '../pages/WellnessTracker/DailyEntry/dailyEntry';\nimport { CheckinLogInfo } from '../pages/WellnessTracker/CheckinLogInfo/checkinLogInfo';\nimport { CheckinLog } from '../pages/WellnessTracker/CheckinLog/checkinLog';\nimport { Resources } from '../pages/Resources/resources';\nimport {CSCContacts} from '../pages/Resources/CscContacts/cscContacts';\nimport {Employee} from '../pages/Resources/Employee/employee';\nimport {EmployeeFam} from '../pages/Resources/EmployeeFamily/employeeFamily';\nimport {Public} from '../pages/Resources/Public/public';\nimport { Tools } from '../pages/Tools/toolStore';\nimport { Settings } from '../pages/Settings/settings';\n\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\n\n//plugins\nimport { HttpModule } from '@angular/http';\n\n//providers\nimport { DataServiceProvider } from '../providers/data-service/data-service';\n\n\n@NgModule({\n  declarations: [\n    MyApp,\n//    HomePage,\n//    ListPage,\n    Dashboard,\n    DailyEntry,\n    CheckinLogInfo,\n    CheckinLog,\n    Resources,\n    CSCContacts,\n    Employee,\n    EmployeeFam,\n    Public,\n    Tools,\n    Settings\n  ],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(MyApp),\n    HttpModule\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n//    HomePage,\n//    ListPage,\n    Dashboard,\n    DailyEntry,\n    CheckinLogInfo,\n    CheckinLog,\n    Resources,\n    CSCContacts,\n    Employee,\n    EmployeeFam,\n    Public,    \n    Tools,\n    Settings    \n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    DataServiceProvider\n]\n})\nexport class AppModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component, ViewChild } from '@angular/core';\nimport { Nav, Platform } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\n//import { HomePage } from '../pages/home/home';\n//import { ListPage } from '../pages/list/list';\nimport { Dashboard } from '../pages/Dashboard/analyticDashboard';\nimport { DailyEntry } from '../pages/WellnessTracker/DailyEntry/dailyEntry';\n//import { CheckinLogInfo } from '../pages/WellnessTracker/CheckinLogInfo/checkinLogInfo';\nimport { CheckinLog } from '../pages/WellnessTracker/CheckinLog/checkinLog';\nimport { Resources } from '../pages/Resources/resources';\n//import { CSCContacts } from '../pages/Resources/CscContacts/cscContacts';\n//import { Employee } from '../pages/Resources/Employee/employee';\n//import { EmployeeFam } from '../pages/Resources/EmployeeFamily/employeeFamily';\n//import { Public } from '../pages/Resources/Public/public';\nimport { Tools } from '../pages/Tools/toolStore';\nimport { Settings } from '../pages/Settings/settings';\n\n\n@Component({\n  templateUrl: 'app.html'\n})\nexport class MyApp {\n  @ViewChild(Nav) nav: Nav;\n\n  rootPage: any = Dashboard;\n\n  pages: Array<{title: string, component: any}>;\n\n  constructor(public platform: Platform, public statusBar: StatusBar, public splashScreen: SplashScreen) {\n    this.initializeApp();\n\n    // used for an example of ngFor and navigation\n    // This is the list that populates the displayed Menu items.\n    this.pages = [\n//      { title: 'Home', component: HomePage },\n//      { title: 'List', component: ListPage },\n      { title: 'Dashboard', component: Dashboard },\n      { title: 'Daily Entry', component: DailyEntry },\n//      { title: 'Daily Log', component: CheckinLogInfo },\n      { title: 'Checkin Log', component: CheckinLog },\n      { title: 'Resources', component: Resources },\n//      { title: 'Contacts', component: CSCContacts },      // Not needed on main menu\n//      { title: 'Employee', component: Employee },\n//      { title: 'Employee Family', component: EmployeeFam },\n//      { title: 'Public', component: Public },\n      { title: 'Tools', component: Tools },\n      { title: 'Settings', component: Settings }\n    ];\n\n  }\n\n  initializeApp() {\n    this.platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n\n  openPage(page) {\n    // Reset the content nav to have just this page\n    // we wouldn't want the back button to show in this scenario\n    this.nav.setRoot(page.component);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\n\r\n//plugins\r\n\r\n/*\r\n  Generated class for the DataServiceProvider provider.\r\n\r\n  See https://angular.io/guide/dependency-injection for more info on providers\r\n  and Angular DI.\r\n*/\r\n@Injectable()\r\nexport class DataServiceProvider {\r\n\r\n  constructor(public http: Http) {}\r\n\r\n\r\n\r\n//define the array wellness that will be used across all of the pages\r\npublic wellness:any[] = [];\r\n\r\n//uuid subscription number\r\nprivate uuidsubscription: string = \"cf22320c-c988-4350-a591-3b3f9b34999f\";\r\n\r\n\r\n//sort a json array by its property field alphabetically\r\n   sortByProperty(property) {\r\n      return function (x, y) {\r\n          return ((x[property] === y[property]) ? 0 : ((x[property] > y[property]) ? 1 : -1));\r\n      };\r\n  };\r\n\r\n\r\n//adds an entry in the SQL Server database\r\n//You can push any JSONdata variable to the database.  if you wwant different element types, just update the wellness type variable accordingly\r\nwellness_tracker_add(moodScore:number, sleepScore: number, stressScore: number, dietScore: number, entryNote:string)\r\n{\r\n    try\r\n    {\r\n      var timeNow = new Date().toISOString();\r\n      var link = 'https://countboard.com/mhapp/mhapp_element_create_app.php';\r\n      var jsondata = JSON.stringify({ moodScore: moodScore, sleepScore:sleepScore, stressScore: stressScore, dietScore: dietScore, entryNote:entryNote, dateEntered:timeNow });\r\n      var data = JSON.stringify({uuidsubscription: this.uuidsubscription, elementtype: 'wellness', name:\"Wellness Tracker Entry\",description:\"Optional Description Field\",jsondata:jsondata});\r\n      return this.http.post(link, data).map(res => res.json());\r\n    }\r\n    catch(err)\r\n    {\r\n      alert(\"An error was found: \" + err);\r\n    }\r\n}\r\n\r\n//pull the list of wellness elements from the SQL Server database\r\nwellness_tracker_list(elementtype:string)\r\n{\r\n  var link = 'https://countboard.com/mhapp/mhapp_elements_list_app.php';\r\n  var data = JSON.stringify({uuidsubscription: this.uuidsubscription, elementtype: elementtype});\r\n  return this.http.post(link, data).map(res => res.json());\r\n}\r\n\r\n//generic AJAX function\r\n  //generic async function\r\n  async(link:string, data:string)\r\n  {\r\n        return this.http.post(link, data).map(res => res.json());\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/data-service/data-service.ts"],"sourceRoot":""}